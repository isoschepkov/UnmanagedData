// swiftformat:disable all
// swiftlint:disable all
// Generated file

import Foundation
import Combine
import CoreData
{% if import %}import {{ import }}{% endif %}

{{ accessModifier }} class {{ entity.name }}: {% if entity.parentName %}{{ entity.parentName }}{% else %}ObservableObject{% endif %} {
    private let __managedObject: {{ entity.managedName }}
    private let __context: NSManagedObjectContext
    private var __observer: NSObjectProtocol?

    {% for attribute in entity.attributes %}
    @Published {{ accessModifier }} var {{ attribute.name }}: {{ attribute.type }}{% if attribute.isOptional %}?{% endif %}{% endfor %}

    {{ accessModifier }} init(_ managedObject: {{ entity.managedName }}) {
        __managedObject = managedObject
        __context = managedObject.managedObjectContext!
        {% for attribute in entity.attributes %}
        {{ attribute.name }} = managedObject.{{ attribute.name }}{% if attribute.unwrapTransform %}{{ attribute.unwrapTransform }}{% endif %}{% endfor %}

        {% if entity.parentName %}super.init(managedObject){% else %}subsribeContext(){% endif %}
    }
    
    {% if not entity.parentName %}
    deinit {
        unsubsribeContext()
    }
    
    private func subsribeContext() {
        __observer = NotificationCenter.default.addObserver(forName: .NSManagedObjectContextObjectsDidChange, object: __context, queue: nil) { [weak self] notification in
            self?.process(notification: notification)
        }
    }
    
    private func unsubsribeContext() {
        if let observer = __observer {
            NotificationCenter.default.removeObserver(observer)
            __observer = nil
        }
    }
    
    private func process(notification: Notification) {
        let objectID = __managedObject.objectID
        var hasChanges: Bool = false
        var isDeleted: Bool = false

        if hasChanges == false, let objects = notification.userInfo?[NSUpdatedObjectsKey] as? NSSet {
            if objects.first(where: { ($0 as? NSManagedObject)?.objectID == objectID }) != nil {
                hasChanges = true
            }
        }

        if hasChanges == false, let objects = notification.userInfo?[NSDeletedObjectsKey] as? NSSet {
            if objects.first(where: { ($0 as? NSManagedObject)?.objectID == objectID }) != nil {
                hasChanges = true
                isDeleted = true
            }
        }

        if hasChanges == false, let objects = notification.userInfo?[NSRefreshedObjectsKey] as? NSSet {
            if objects.first(where: { ($0 as? NSManagedObject)?.objectID == objectID }) != nil {
                hasChanges = true
            }
        }

        if isDeleted == true {
            unsubsribeContext()
        } else if hasChanges == true {
            updateValues()
        }
    }
    {% endif %}
    
    {% if entity.parentName %}override {% endif %}func updateValues() {
        {% for attribute in entity.attributes %}
        {{ attribute.name }} = __managedObject.{{ attribute.name }}{% if attribute.unwrapTransform %}{{ attribute.unwrapTransform }}{% endif %}{% endfor %}
        
        {% if entity.parentName %}super.updateValues(){% endif %}
    }
}
