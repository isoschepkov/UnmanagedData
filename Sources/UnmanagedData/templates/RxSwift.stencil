// swiftformat:disable all
// swiftlint:disable all
// Generated file

import Foundation
import RxSwift
import CoreData
{% if import %}import {{ import }}{% endif %}

{{ accessModifier }} class {{ entity.name }}: {% if entity.parentName %}{{ entity.parentName }}{% else %}ObservableConvertibleType{% endif %} {
    {% if not entity.parentName %}
    {{ nonClassAccessModifier }} enum ObjectEvent {
        case willChange
        case didChange
        case didDelete
    }
    
    private let __eventPublisher = PublishSubject<ObjectEvent>(){% endif %}

    private let __managedObject: {{ entity.managedName }}
    private let __context: NSManagedObjectContext
    {% if not entity.parentName %}private var __observer: NSObjectProtocol?{% endif %}
    {% if entity.parentName %}override {% endif %}{{ accessModifier }} var managedObject: {{ entity.managedName }} { __managedObject }

    {% for attribute in entity.attributes %}
    {{ accessModifier }} let {{ attribute.name }}: BehaviorSubject<{{ attribute.type }}>{% endfor %}
    
    {% for attribute in entity.relationships %}
    {{ accessModifier }} var {{ attribute.name }}: {{ attribute.type }} {
        var result: {{ attribute.type }}?
        __managedObject.managedObjectContext!.performAndWait {
            let managedResult = __managedObject.{{ attribute.name }}{{ attribute.unwrapTransform }}
            {% if attribute.isArray and attribute.isOptional %}
            result = managedResult?.map { {{ attribute.instanceType }}($0) }
            {% elif attribute.isArray and not attribute.isOptional %}
            result = managedResult.map { {{ attribute.instanceType }}($0) }
            {% elif not attribute.isArray and attribute.isOptional %}
            result = managedResult != nil ? {{ attribute.instanceType }}(managedResult!) : nil
            {% elif not attribute.isArray and not attribute.isOptional %}
            result = {{ attribute.instanceType }}(managedResult)
            {% endif %}
        }
        return result!
    }
    {% endfor %}
    
    {% for attribute in entity.fetchedProperties %}
    {{ accessModifier }} var {{ attribute.name }}: {{ attribute.type }} {
        var result: {{ attribute.type }}?
        __managedObject.managedObjectContext!.performAndWait {
            let managedResult = __managedObject.value(forKey: "{{ attribute.name }}"){{ attribute.unwrapTransform }}
            {% if attribute.isArray and attribute.isOptional %}
            result = managedResult?.map { {{ attribute.instanceType }}($0) }
            {% elif attribute.isArray and not attribute.isOptional %}
            result = managedResult.map { {{ attribute.instanceType }}($0) }
            {% elif not attribute.isArray and attribute.isOptional %}
            result = managedResult != nil ? {{ attribute.instanceType }}(managedResult!) : nil
            {% elif not attribute.isArray and not attribute.isOptional %}
            result = {{ attribute.instanceType }}(managedResult)
            {% endif %}
        }
        return result!
    }
    {% endfor %}

    {{ accessModifier }} init(_ managedObject: {{ entity.managedName }}) {
        __managedObject = managedObject
        __context = managedObject.managedObjectContext!

        {% for attribute in entity.attributes %}
        var {{ attribute.name }}: {{ attribute.type }}{% if not attribute.isOptional %}?{% endif %}{% endfor %}
        
        __context.performAndWait {
            {% for attribute in entity.attributes %}
            {{ attribute.name }} = managedObject.{{ attribute.name }}{{ attribute.unwrapTransform }}{% endfor %}
        }
        
        {% for attribute in entity.attributes %}
        self.{{ attribute.name }} = BehaviorSubject(value:{{ attribute.name }}{% if not attribute.isOptional %}!{% endif %}){% endfor %}

        {% if entity.parentName %}super.init(managedObject){% else %}subsribeContext(){% endif %}
    }
    {% if not entity.parentName %}
    deinit {
        unsubsribeContext()
    }

    {{ accessModifier }} func asObservable() -> Observable<ObjectEvent> {
        return __eventPublisher
    }
    
    private func subsribeContext() {
        __observer = NotificationCenter.default.addObserver(forName: .NSManagedObjectContextObjectsDidChange, object: __context, queue: nil) { [weak self] notification in
            self?.process(notification: notification)
        }
    }
    
    private func unsubsribeContext() {
        if let observer = __observer {
            NotificationCenter.default.removeObserver(observer)
            __observer = nil
        }
    }
    
    private func process(notification: Notification) {
        let objectID = __managedObject.objectID
        var hasChanges: Bool = false
        var isDeleted: Bool = false

        if hasChanges == false, let objects = notification.userInfo?[NSUpdatedObjectsKey] as? NSSet {
            if objects.first(where: { ($0 as? NSManagedObject)?.objectID == objectID }) != nil {
                hasChanges = true
            }
        }

        if hasChanges == false, let objects = notification.userInfo?[NSDeletedObjectsKey] as? NSSet {
            if objects.first(where: { ($0 as? NSManagedObject)?.objectID == objectID }) != nil {
                hasChanges = true
                isDeleted = true
            }
        }

        if hasChanges == false, let objects = notification.userInfo?[NSRefreshedObjectsKey] as? NSSet {
            if objects.first(where: { ($0 as? NSManagedObject)?.objectID == objectID }) != nil {
                hasChanges = true
            }
        }

        if isDeleted == true {
            unsubsribeContext()
            __eventPublisher.onNext(.didDelete)
        } else if hasChanges == true {
            __eventPublisher.onNext(.willChange)
            updateValues()
        }
    }
    {% endif %}
    
    {% if entity.parentName %}override {% endif %}func updateValues() {
        {% for attribute in entity.attributes %}
        {{ attribute.name }}.onNext(__managedObject.{{ attribute.name }}{{ attribute.unwrapTransform }}){% endfor %}
        
        {% if entity.parentName %}super.updateValues(){% else %}__eventPublisher.onNext(.didChange){% endif %}
    }
}
