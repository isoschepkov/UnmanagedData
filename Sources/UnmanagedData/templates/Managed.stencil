// swiftformat:disable all
// swiftlint:disable all
// Generated file

import Foundation
import CoreData
{% if import %}import {{ import }}{% endif %}

{{ accessModifier }} class {{ entity.name }}{% if entity.parentName %}: {{ entity.parentName }}{% else %}: NSManagedObject{% endif %} {
    @nonobjc {{ accessModifier }} class func fetchRequest() -> NSFetchRequest<{{ entity.name }}> {
        return NSFetchRequest<{{ entity.name }}>(entityName: "{{ entity.managedName }}")
    }

    {% for attribute in entity.attributes %}
    @NSManaged {{ accessModifier }} var {{ attribute.name }}: {{ attribute.managedType }}{% endfor %}
    
    {% for attribute in entity.relationships %}
    @NSManaged {{ accessModifier }} var {{ attribute.name }}: {{ attribute.managedType }}{% endfor %}
    
    {% for attribute in entity.fetchedProperties %}
    {{ accessModifier }} var {{ attribute.name }}: {{ attribute.type }} {
        return value(forKey: "{{ attribute.name }}"){{ attribute.unwrapTransform }}
    }
    {% endfor %}
}


{% for attribute in entity.relationships %}
{% if attribute.isSet %}
extension {{ entity.name }} {
    @objc(add{{ attribute.capitalizedName }}Object:)
    @NSManaged {{ accessModifier }} func addTo{{ attribute.capitalizedName }}(_ value: {{ attribute.relationshipType }})
    
    @objc(remove{{ attribute.capitalizedName }}Object:)
    @NSManaged {{ accessModifier }} func removeFrom{% filter capitalize %}{{ attribute.name }}{% endfilter %}(_ value: {{ attribute.relationshipType }})
    
    @objc(add{{ attribute.capitalizedName }}:)
    @NSManaged {{ accessModifier }} func addTo{{ attribute.capitalizedName }}(_ value: {% if attribute.isOrdered %}NSOrderedSet{% else %}NSSet{% endif %})
    
    @objc(remove{{ attribute.capitalizedName }}:)
    @NSManaged {{ accessModifier }} func removeFrom{{ attribute.capitalizedName }}(_ value: {% if attribute.isOrdered %}NSOrderedSet{% else %}NSSet{% endif %})
}
{% endif %}
{% endfor %}
