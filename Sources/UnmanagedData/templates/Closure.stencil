// swiftformat:disable all
// swiftlint:disable all
// Generated file

import Foundation
import CoreData
{% if import %}import {{ import }}{% endif %}

{{ accessModifier }} class {{ entity.name }}{% if entity.parentName %}: {{ entity.parentName }}{% endif %} {
    {% if not entity.parentName %}
    {{ nonClassAccessModifier }} enum ObjectEvent {
        case willChange
        case didChange
        case didDelete
    }

    {{ accessModifier }} var onEventBlock: ((_ event: ObjectEvent, _ object: {{ entity.name }}) -> Void)? {
        didSet {
            if onEventBlock != nil, oldValue == nil {
                subsribeContext()
            } else if onEventBlock == nil, oldValue != nil {
                unsubsribeContext()
            }
        }
    }
    {% endif %}

    private let __managedObject: {{ entity.managedName }}
    private let __context: NSManagedObjectContext
    {% if not entity.parentName %}private var __observer: NSObjectProtocol?{% endif %}
    {% if entity.parentName %}override {% endif %}{{ accessModifier }} var managedObject: {{ entity.managedName }} { __managedObject }

    {% for attribute in entity.attributes %}
    {{ accessModifier }} var {{ attribute.name }}: {{ attribute.type }}{% endfor %}
    
    {% for attribute in entity.relationships %}
    {{ accessModifier }} var {{ attribute.name }}: {{ attribute.type }} {
        let managedResult = __managedObject.{{ attribute.name }}{{ attribute.unwrapTransform }}
        {% if attribute.isArray and attribute.isOptional %}
        return managedResult?.map { {{ attribute.instanceType }}($0) }
        {% elif attribute.isArray and not attribute.isOptional %}
        return managedResult.map { {{ attribute.instanceType }}($0) }
        {% elif not attribute.isArray and attribute.isOptional %}
        return managedResult != nil ? {{ attribute.instanceType }}(managedResult!) : nil
        {% elif not attribute.isArray and not attribute.isOptional %}
        return {{ attribute.instanceType }}(managedResult)
        {% endif %}
    }
    {% endfor %}
    
    {% for attribute in entity.fetchedProperties %}
    {{ accessModifier }} var {{ attribute.name }}: {{ attribute.type }} {
        let managedResult = __managedObject.value(forKey: "{{ attribute.name }}"){{ attribute.unwrapTransform }}
        {% if attribute.isArray and attribute.isOptional %}
        return managedResult?.map { {{ attribute.instanceType }}($0) }
        {% elif attribute.isArray and not attribute.isOptional %}
        return managedResult.map { {{ attribute.instanceType }}($0) }
        {% elif not attribute.isArray and attribute.isOptional %}
        return managedResult != nil ? {{ attribute.instanceType }}(managedResult!) : nil
        {% elif not attribute.isArray and not attribute.isOptional %}
        return {{ attribute.instanceType }}(managedResult)
        {% endif %}
    }
    {% endfor %}

    {{ accessModifier }} init(_ managedObject: {{ entity.managedName }}) {
        __managedObject = managedObject
        __context = managedObject.managedObjectContext!

        {% for attribute in entity.attributes %}
        var {{ attribute.name }}: {{ attribute.type }}{% if not attribute.isOptional %}?{% endif %}{% endfor %}
        
        __context.performAndWait {
            {% for attribute in entity.attributes %}
            {{ attribute.name }} = managedObject.{{ attribute.name }}{{ attribute.unwrapTransform }}{% endfor %}
        }
        
        {% for attribute in entity.attributes %}
        self.{{ attribute.name }} = {{ attribute.name }}{% if not attribute.isOptional %}!{% endif %}{% endfor %}

        {% if entity.parentName %}super.init(managedObject){% endif %}
    }
    {% if not entity.parentName %}
    
    private func subsribeContext() {
        __observer = NotificationCenter.default.addObserver(forName: .NSManagedObjectContextObjectsDidChange, object: __context, queue: nil) { [weak self] notification in
            self?.process(notification: notification)
        }
    }
    
    private func unsubsribeContext() {
        if let observer = __observer {
            NotificationCenter.default.removeObserver(observer)
            __observer = nil
        }
    }
    
    private func process(notification: Notification) {
        let objectID = __managedObject.objectID
        var hasChanges: Bool = false
        var isDeleted: Bool = false

        if hasChanges == false, let objects = notification.userInfo?[NSUpdatedObjectsKey] as? NSSet {
            if objects.first(where: { ($0 as? NSManagedObject)?.objectID == objectID }) != nil {
                hasChanges = true
            }
        }

        if hasChanges == false, let objects = notification.userInfo?[NSDeletedObjectsKey] as? NSSet {
            if objects.first(where: { ($0 as? NSManagedObject)?.objectID == objectID }) != nil {
                hasChanges = true
                isDeleted = true
            }
        }

        if hasChanges == false, let objects = notification.userInfo?[NSRefreshedObjectsKey] as? NSSet {
            if objects.first(where: { ($0 as? NSManagedObject)?.objectID == objectID }) != nil {
                hasChanges = true
            }
        }

        if isDeleted == true {
            unsubsribeContext()
            onEventBlock?(.didDelete, self)
        } else if hasChanges == true {
            onEventBlock?(.willChange, self)
            updateValues()
        }
    }
    {% endif %}
    
    {% if entity.parentName %}override {% endif %}func updateValues() {
        {% for attribute in entity.attributes %}
        {{ attribute.name }} = __managedObject.{{ attribute.name }}{{ attribute.unwrapTransform }}{% endfor %}
        
        {% if entity.parentName %}super.updateValues(){% else %}onEventBlock?(.didChange, self){% endif %}
    }
}
